 //////////////////
 // NEON SHADER //
 ////////////////
(FOR SHADER #1)

-------------------------------
| LINK: https://goo.gl/C5Z4l4 |
-------------------------------

# FRAGMENT

precision highp float;
varying vec3 fNormal;
const float PI = 3.14156;
uniform float time;
varying vec3 uPos;

void main()
{
  vec3 dir = vec3(2.0*sin(4.0*PI*time),0,2.0*cos(4.0*PI*time));
  vec3 color;
  color.r = (mod(uPos.x, 0.5) < .25) ? smoothstep(0.0, 0.5, mod(uPos.x, 0.5)) : 0.1;
  color.g = (mod(uPos.y, 0.5) < .25) ? smoothstep(0.0, 0.5, mod(uPos.y, 0.5)) : 0.1;
  color.b = (mod(uPos.z, 0.5) < .25) ? smoothstep(0.0, 0.5, mod(uPos.z, 0.5)) : 0.1;
  float diffuse = .5 + max(dot(fNormal,normalize(dir)), 0.0);
  gl_FragColor = vec4(diffuse * 2.0 * color, 1.0);
}

# VERTEX

precision highp float;
attribute vec3 position;
attribute vec3 normal;
uniform mat3 normalMatrix;
uniform mat4 modelViewMatrix;
uniform mat4 projectionMatrix;
varying vec3 fNormal;
varying vec3 uPos;

void main()
{
  fNormal = normalize(normalMatrix * normal);
  vec4 pos = modelViewMatrix * vec4(position, 1.0);
  //pos.x = (pos.x + mod(pos.x, 0.5));
  //pos.y = (pos.y + mod(pos.y, 0.5));
  //pos.z = (pos.z + mod(pos.z, 0.5));
  vec4 cPos = projectionMatrix * pos;
  uPos = position;
  gl_Position = cPos;
}

////////////
// Dance //
//////////
(FOR SHADER #2)

-------------------------------
| LINK: https://goo.gl/0SGRd8 |
-------------------------------

# FRAGMENT

precision highp float;
uniform float time;
uniform vec2 resolution;
varying vec3 fPosition;
varying vec3 fNormal;
varying vec3 uPos;
varying vec3 dtPos;
varying vec3 uNormal;
const float PI = 3.14159;
const float specular_coeff  = 1.0;
const float specular_exp    = 32.0;

void main()
{
  vec3 light_color = vec3(1.0, 1.0, 1.0);
  vec3 dir = vec3(1, 1, 0);
  vec3 l = normalize(dir);
  vec3 n = normalize(fNormal);
  vec3 e = normalize(-fPosition);
  vec3 h = normalize (e+l);
  vec3 color;
  float diffuse;
  if (abs(dot(uNormal, vec3(0, 0, 1))) < 0.9) {
    color.r = (mod(uPos.x, 0.5) < .25) ? 
    smoothstep(0.0, 0.5, mod(uPos.x, 0.5)) : 0.1;
    color.g = (mod(uPos.y, 0.5) < .25) ? 
    smoothstep(0.0, 0.5, mod(uPos.y, 0.5)) : 0.1;
    color.b = (mod(uPos.z, 0.5) < .25) ? 
    smoothstep(0.0, 0.5, mod(uPos.z, 0.5)) : 0.1;
    diffuse = .5 + max(dot(fNormal,normalize(dir)), 0.0);
  }
  else {
    diffuse = .5 + max(dot(fNormal,normalize(dir)), 0.5);
    gl_FragColor = vec4(dtPos, 1.0);
    return;
  }
  vec3 specular_color = specular_coeff * pow(max(0.0,dot(n,h)),specular_exp) * light_color;
  gl_FragColor = vec4(diffuse * 2.0 * color + specular_color, 1.0);
}

# Vertex
precision highp float;
attribute vec3 position;
attribute vec3 normal;
uniform float time;
uniform mat3 normalMatrix;
uniform mat4 modelViewMatrix;
uniform mat4 projectionMatrix;
varying vec3 fNormal;
varying vec3 fPosition;
varying vec3 uPos;
varying vec3 uNormal;
varying vec3 dtPos;
float PI = 3.14159;

float squareWave(float time) { 
    return 4.0/PI*(sin(2.0*PI*time) + 
                   1.0/3.0*sin(6.0*PI*time) +
                   1.0/5.0*sin(10.0*PI*time) +
                   1.0/7.0*sin(14.0*PI*time));
}

void main()
{
  uNormal = normal;
  fNormal = normalize(normalMatrix * normal);
  vec4 pos = vec4(position.x + squareWave(6.0*time),
                  position.y + squareWave(6.0*time + PI/4.0),
                  position.z + squareWave(6.0*time + PI/2.0),
                  1.0);
  dtPos = vec3(cos(0.5*PI*position.y + 8.0*time),
               1.0,
               sin(0.5*PI*position.y + 8.0*time)
              );
  uPos = pos.xyz;
  pos = modelViewMatrix * pos;
  fPosition = pos.xyz;
  gl_Position = projectionMatrix * pos;
}

////////////////////////////////////////////////////////////////
// BONUS EXTRA SHADER THAT IS NEAT (TOP TWO ARE FOR GRADING) //
//////////////////////////////////////////////////////////////

// Motion shader
https://goo.gl/bqjeo1


